// Generated by Dagger (https://google.github.io/dagger).
package drewhamilton.skylight.android.sample;

import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import drewhamilton.rxpreferences.RxPreferences;
import drewhamilton.skylight.android.sample.location.LocationRepository;
import drewhamilton.skylight.android.sample.main.MainActivity;
import drewhamilton.skylight.android.sample.main.MainActivity_MembersInjector;
import drewhamilton.skylight.android.sample.settings.SettingsActivity;
import drewhamilton.skylight.android.sample.settings.SettingsActivity_MembersInjector;
import drewhamilton.skylight.android.sample.source.MutableSkylightRepository;
import drewhamilton.skylight.android.sample.source.MutableSkylightRepository_Factory;
import drewhamilton.skylight.android.sample.source.SkylightRepository;
import drewhamilton.skylight.android.sample.source.SkylightRepository_Factory;
import drewhamilton.skylight.backport.Skylight;
import drewhamilton.skylight.backport.calculator.CalculatorSkylight;
import drewhamilton.skylight.backport.calculator.CalculatorSkylight_Factory;
import drewhamilton.skylight.backport.dummy.DummySkylight;
import drewhamilton.skylight.backport.dummy.dagger.DummySkylightComponent;
import drewhamilton.skylight.backport.sso.SsoSkylight;
import drewhamilton.skylight.backport.sso.dagger.SsoSkylightComponent;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<Application> applicationProvider;

  private Provider<Context> applicationContextProvider;

  private Provider<SharedPreferences> sharedPreferencesProvider;

  private Provider<RxPreferences> rxPreferencesProvider;

  private Provider<SkylightRepository> skylightRepositoryProvider;

  private Provider<SsoSkylightComponent> ssoSkylightComponentProvider;

  private Provider<SsoSkylight> ssoSkylightProvider;

  private Provider<CalculatorSkylight> calculatorSkylightProvider;

  private Provider<DummySkylightComponent> dummySkylightComponentProvider;

  private Provider<DummySkylight> dummySkylightProvider;

  private Provider<MutableSkylightRepository> mutableSkylightRepositoryProvider;

  private DaggerAppComponent(
      Application applicationParam,
      SsoSkylightComponent ssoSkylightComponentParam,
      DummySkylightComponent dummySkylightComponentParam) {

    initialize(applicationParam, ssoSkylightComponentParam, dummySkylightComponentParam);
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private LocationRepository getLocationRepository() {
    return new LocationRepository(applicationContextProvider.get());
  }

  private Skylight getSkylight() {
    return SkylightModule_SkylightFactory.skylight(
        skylightRepositoryProvider.get(),
        ssoSkylightProvider.get(),
        calculatorSkylightProvider.get(),
        dummySkylightProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(
      final Application applicationParam,
      final SsoSkylightComponent ssoSkylightComponentParam,
      final DummySkylightComponent dummySkylightComponentParam) {
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.applicationContextProvider =
        DoubleCheck.provider(
            ApplicationModule_ApplicationContextFactory.create(applicationProvider));
    this.sharedPreferencesProvider =
        SingleCheck.provider(
            ApplicationModule_SharedPreferencesFactory.create(applicationProvider));
    this.rxPreferencesProvider =
        SingleCheck.provider(
            ApplicationModule_RxPreferencesFactory.create(sharedPreferencesProvider));
    this.skylightRepositoryProvider =
        SingleCheck.provider(SkylightRepository_Factory.create(rxPreferencesProvider));
    this.ssoSkylightComponentProvider = InstanceFactory.create(ssoSkylightComponentParam);
    this.ssoSkylightProvider =
        SingleCheck.provider(
            SkylightModule_SsoSkylightFactory.create(ssoSkylightComponentProvider));
    this.calculatorSkylightProvider = SingleCheck.provider(CalculatorSkylight_Factory.create());
    this.dummySkylightComponentProvider = InstanceFactory.create(dummySkylightComponentParam);
    this.dummySkylightProvider =
        SingleCheck.provider(
            SkylightModule_DummySkylightFactory.create(dummySkylightComponentProvider));
    this.mutableSkylightRepositoryProvider =
        SingleCheck.provider(MutableSkylightRepository_Factory.create(rxPreferencesProvider));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  @Override
  public void inject(SettingsActivity settingsActivity) {
    injectSettingsActivity(settingsActivity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectLocationRepository(instance, getLocationRepository());
    MainActivity_MembersInjector.injectSkylight(instance, getSkylight());
    return instance;
  }

  private SettingsActivity injectSettingsActivity(SettingsActivity instance) {
    SettingsActivity_MembersInjector.injectSkylightRepository(
        instance, mutableSkylightRepositoryProvider.get());
    return instance;
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(
        Application application,
        SsoSkylightComponent ssoSkylightComponent,
        DummySkylightComponent dummySkylightComponent) {
      Preconditions.checkNotNull(application);
      Preconditions.checkNotNull(ssoSkylightComponent);
      Preconditions.checkNotNull(dummySkylightComponent);
      return new DaggerAppComponent(application, ssoSkylightComponent, dummySkylightComponent);
    }
  }
}

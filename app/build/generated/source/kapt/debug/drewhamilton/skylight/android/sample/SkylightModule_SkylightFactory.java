// Generated by Dagger (https://google.github.io/dagger).
package drewhamilton.skylight.android.sample;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import drewhamilton.skylight.android.sample.source.SkylightRepository;
import drewhamilton.skylight.backport.Skylight;
import drewhamilton.skylight.backport.calculator.CalculatorSkylight;
import drewhamilton.skylight.backport.dummy.DummySkylight;
import drewhamilton.skylight.backport.sso.SsoSkylight;
import javax.inject.Provider;

public final class SkylightModule_SkylightFactory implements Factory<Skylight> {
  private final Provider<SkylightRepository> skylightRepositoryProvider;

  private final Provider<SsoSkylight> ssoSkylightProvider;

  private final Provider<CalculatorSkylight> calculatorSkylightProvider;

  private final Provider<DummySkylight> dummySkylightProvider;

  public SkylightModule_SkylightFactory(
      Provider<SkylightRepository> skylightRepositoryProvider,
      Provider<SsoSkylight> ssoSkylightProvider,
      Provider<CalculatorSkylight> calculatorSkylightProvider,
      Provider<DummySkylight> dummySkylightProvider) {
    this.skylightRepositoryProvider = skylightRepositoryProvider;
    this.ssoSkylightProvider = ssoSkylightProvider;
    this.calculatorSkylightProvider = calculatorSkylightProvider;
    this.dummySkylightProvider = dummySkylightProvider;
  }

  @Override
  public Skylight get() {
    return skylight(
        skylightRepositoryProvider.get(),
        ssoSkylightProvider.get(),
        calculatorSkylightProvider.get(),
        dummySkylightProvider.get());
  }

  public static SkylightModule_SkylightFactory create(
      Provider<SkylightRepository> skylightRepositoryProvider,
      Provider<SsoSkylight> ssoSkylightProvider,
      Provider<CalculatorSkylight> calculatorSkylightProvider,
      Provider<DummySkylight> dummySkylightProvider) {
    return new SkylightModule_SkylightFactory(
        skylightRepositoryProvider,
        ssoSkylightProvider,
        calculatorSkylightProvider,
        dummySkylightProvider);
  }

  public static Skylight skylight(
      SkylightRepository skylightRepository,
      SsoSkylight ssoSkylight,
      CalculatorSkylight calculatorSkylight,
      DummySkylight dummySkylight) {
    return Preconditions.checkNotNull(
        SkylightModule.skylight(skylightRepository, ssoSkylight, calculatorSkylight, dummySkylight),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}

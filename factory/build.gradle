apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

ext {
    artifact = 'skylight-factory'
    bintrayName = 'SkylightAndroid-factory'
    libraryName = 'Skylight Android Factory'
    libraryDescription = 'A simple factory for creating Skylight instances on Android.'
}

android {
    compileSdkVersion projectVersions.targetSdk

    defaultConfig {
        minSdkVersion projectVersions.minSdk
        targetSdkVersion projectVersions.targetSdk
        versionName projectVersions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    signingConfigs {
        release {
            storeFile file(keystore)
            storePassword keystorePassword
            keyAlias keyAlias
            keyPassword keyPassword
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    testOptions {
        // Needed for Process pid when checking permissions:
        unitTests.returnDefaultValues = true
    }
    lintOptions {
        lintConfig file('../lint.xml')
    }
}

dependencies {
    implementation deps.kotlinStdLib

    api deps.skylight
    implementation deps.skylightCalculator
    implementation deps.skylightDummy

    implementation deps.coreKtx

    testImplementation deps.junit
    testImplementation deps.mockito
    testImplementation deps.threeTenBp

    androidTestImplementation deps.junitExt
    androidTestImplementation deps.espresso
}

// TODO WORKAROUND: Get this to work in its own file
//region Compatibility
configurations {
    baseline
    latest
}

dependencies {
    baseline("$group:$artifact:$compatibleVersion") {
        transitive false
        force true
    }
    latest project(path: ":$project.name", configuration: 'releaseRuntimeElements')
}

apply plugin: 'me.champeau.gradle.japicmp'
//noinspection UnnecessaryQualifiedReference
task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {
    oldClasspath = configurations.baseline.incoming.artifactView { config ->
        config.attributes { container ->
            container.attribute(Attribute.of("artifactType", String.class), "jar")
        }
    }.artifacts.artifactFiles

    newClasspath = configurations.latest.incoming.artifactView { config ->
        config.attributes { container ->
            container.attribute(Attribute.of("artifactType", String.class), "jar")
        }
    }.artifacts.artifactFiles

    onlyBinaryIncompatibleModified true
    failOnModification failIfIncompatible
    txtOutputFile = file("$buildDir/reports/japi.txt")

    // TODO WORKAROUND: JApiCmp can't find Android classes
    ignoreMissingClasses true
}

check.dependsOn(japicmp)
build.dependsOn(check)
//endregion
